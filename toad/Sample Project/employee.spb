
create or replace package body employee
is
  --// Package name and program name globals --//
  c_pkgname varchar2(30) := 'employee';
  g_progname varchar2(30) := null;

  --// Update Flag private data structures. --//
  type frcflg_rt is record(
  last_name                     char(1),
  first_name                    char(1),
  middle_initial                char(1),
  job_id                        char(1),
  manager_id                    char(1),
  hire_date                     char(1),
  salary                        char(1),
  commission                    char(1),
  department_id                 char(1),
  empno                         char(1),
  ename                         char(1),
  created_by                    char(1),
  created_on                    char(1),
  changed_by                    char(1),
  changed_on                    char(1));

  frcflg frcflg_rt;
  emptyfrc frcflg_rt;
  c_set char(1) := 'Y';
  c_noset char(1) := 'N';

  --// Private Modules //--

  --// For Dynamic SQL operations; currently unused. //--
  procedure initcur(
  cur_inout in out integer
  )
  is
  begin
  if not dbms_sql.is_open(cur_inout
     ) then
  cur_inout := dbms_sql.open_cursor;
  end if;
  exception
  when invalid_cursor then
  cur_inout := dbms_sql.open_cursor;
  end;

  procedure start_program(
  nm in varchar2,
  msg in varchar2 := null
  )
  is
  begin
  g_progname := nm;
  end;

  procedure end_program
  is
  begin
  g_progname := null;
  end;

  --// Cursor management procedures //--

  --// Open the cursors with some options. //--
  procedure open_allforpky_cur(
  employee_id_in in employee.employee_id%type,
  close_if_open in boolean := true
  )
  is
    v_close boolean := nvl(close_if_open,
                       true
                       );
    v_open boolean := true;
  begin
  start_program('open_allforpky_cur'
  );

  if     allforpky_cur%isopen
     and v_close then
  close allforpky_cur;
  elsif     allforpky_cur%isopen
        and not v_close then
  v_open := false;
  end if;

  if v_open then
  open allforpky_cur(employee_id_in
  );
  end if;

  end_program;
  end;

  procedure open_allbypky_cur(
  close_if_open in boolean := true
  )
  is
    v_close boolean := nvl(close_if_open,
                       true
                       );
    v_open boolean := true;
  begin
  if     allbypky_cur%isopen
     and v_close then
  close allbypky_cur;
  elsif     allbypky_cur%isopen
        and not v_close then
  v_open := false;
  end if;

  if v_open then
  open allbypky_cur;
  end if;
  end;

  procedure open_emp_dept_lookup_all_cur(
  department_id_in in employee.department_id%type,
  close_if_open in boolean := true
  )
  is
    v_close boolean := nvl(close_if_open,
                       true
                       );
    v_open boolean := true;
  begin
  if     emp_dept_lookup_all_cur%isopen
     and v_close then
  close emp_dept_lookup_all_cur;
  elsif     emp_dept_lookup_all_cur%isopen
        and not v_close then
  v_open := false;
  end if;

  if v_open then
  open emp_dept_lookup_all_cur(department_id_in
  );
  end if;
  end;

  procedure open_emp_job_lookup_all_cur(
  job_id_in in employee.job_id%type,
  close_if_open in boolean := true
  )
  is
    v_close boolean := nvl(close_if_open,
                       true
                       );
    v_open boolean := true;
  begin
  if     emp_job_lookup_all_cur%isopen
     and v_close then
  close emp_job_lookup_all_cur;
  elsif     emp_job_lookup_all_cur%isopen
        and not v_close then
  v_open := false;
  end if;

  if v_open then
  open emp_job_lookup_all_cur(job_id_in
  );
  end if;
  end;

  procedure open_emp_mgr_lookup_all_cur(
  manager_id_in in employee.manager_id%type,
  close_if_open in boolean := true
  )
  is
    v_close boolean := nvl(close_if_open,
                       true
                       );
    v_open boolean := true;
  begin
  if     emp_mgr_lookup_all_cur%isopen
     and v_close then
  close emp_mgr_lookup_all_cur;
  elsif     emp_mgr_lookup_all_cur%isopen
        and not v_close then
  v_open := false;
  end if;

  if v_open then
  open emp_mgr_lookup_all_cur(manager_id_in
  );
  end if;
  end;

  --// Close the cursors if they are open. //--
  procedure close_allforpky_cur
  is
  begin
  if allforpky_cur%isopen then
  close allforpky_cur;
  end if;
  end;

  procedure close_allbypky_cur
  is
  begin
  if allbypky_cur%isopen then
  close allbypky_cur;
  end if;
  end;

  procedure close_emp_dept_lookup_all_cur
  is
  begin
  if emp_dept_lookup_all_cur%isopen then
  close emp_dept_lookup_all_cur;
  end if;
  end;

  procedure close_emp_job_lookup_all_cur
  is
  begin
  if emp_job_lookup_all_cur%isopen then
  close emp_job_lookup_all_cur;
  end if;
  end;

  procedure close_emp_mgr_lookup_all_cur
  is
  begin
  if emp_mgr_lookup_all_cur%isopen then
  close emp_mgr_lookup_all_cur;
  end if;
  end;

  procedure closeall
  is
  begin
  close_allforpky_cur;
  close_allbypky_cur;
  close_emp_dept_lookup_all_cur;
  close_emp_job_lookup_all_cur;
  close_emp_mgr_lookup_all_cur;
  end;

  --// Emulate aggregate-level record operations. //--

  function recseq(
  rec1 in employee%rowtype,
  rec2 in employee%rowtype
  )
  return boolean
  is
    unequal_records exception;
    retval boolean;
  begin
  retval :=
     rec1.employee_id = rec2.employee_id
  or (    rec1.employee_id is null
      and rec2.employee_id is null);
  if not nvl(retval,
     false
     ) then
  raise unequal_records;
  end if;
  retval :=
     rec1.last_name = rec2.last_name
  or (    rec1.last_name is null
      and rec2.last_name is null);
  if not nvl(retval,
     false
     ) then
  raise unequal_records;
  end if;
  retval :=
     rec1.first_name = rec2.first_name
  or (    rec1.first_name is null
      and rec2.first_name is null);
  if not nvl(retval,
     false
     ) then
  raise unequal_records;
  end if;
  retval :=
     rec1.middle_initial = rec2.middle_initial
  or (    rec1.middle_initial is null
      and rec2.middle_initial is null);
  if not nvl(retval,
     false
     ) then
  raise unequal_records;
  end if;
  retval :=
        rec1.job_id = rec2.job_id
     or (    rec1.job_id is null
         and rec2.job_id is null);
  if not nvl(retval,
     false
     ) then
  raise unequal_records;
  end if;
  retval :=
     rec1.manager_id = rec2.manager_id
  or (    rec1.manager_id is null
      and rec2.manager_id is null);
  if not nvl(retval,
     false
     ) then
  raise unequal_records;
  end if;
  retval :=
     rec1.hire_date = rec2.hire_date
  or (    rec1.hire_date is null
      and rec2.hire_date is null);
  if not nvl(retval,
     false
     ) then
  raise unequal_records;
  end if;
  retval :=
        rec1.salary = rec2.salary
     or (    rec1.salary is null
         and rec2.salary is null);
  if not nvl(retval,
     false
     ) then
  raise unequal_records;
  end if;
  retval :=
     rec1.commission = rec2.commission
  or (    rec1.commission is null
      and rec2.commission is null);
  if not nvl(retval,
     false
     ) then
  raise unequal_records;
  end if;
  retval :=
     rec1.department_id = rec2.department_id
  or (    rec1.department_id is null
      and rec2.department_id is null);
  if not nvl(retval,
     false
     ) then
  raise unequal_records;
  end if;
  retval :=
            rec1.empno = rec2.empno
         or (    rec1.empno is null
             and rec2.empno is null);
  if not nvl(retval,
     false
     ) then
  raise unequal_records;
  end if;
  retval :=
            rec1.ename = rec2.ename
         or (    rec1.ename is null
             and rec2.ename is null);
  if not nvl(retval,
     false
     ) then
  raise unequal_records;
  end if;
  retval :=
     rec1.created_by = rec2.created_by
  or (    rec1.created_by is null
      and rec2.created_by is null);
  if not nvl(retval,
     false
     ) then
  raise unequal_records;
  end if;
  retval :=
     rec1.created_on = rec2.created_on
  or (    rec1.created_on is null
      and rec2.created_on is null);
  if not nvl(retval,
     false
     ) then
  raise unequal_records;
  end if;
  retval :=
     rec1.changed_by = rec2.changed_by
  or (    rec1.changed_by is null
      and rec2.changed_by is null);
  if not nvl(retval,
     false
     ) then
  raise unequal_records;
  end if;
  retval :=
     rec1.changed_on = rec2.changed_on
  or (    rec1.changed_on is null
      and rec2.changed_on is null);
  if not nvl(retval,
     false
     ) then
  raise unequal_records;
  end if;
  return true;
  exception
  when unequal_records then
  return false;
  end;

  function recseq(
  rec1 in pky_rt,
  rec2 in pky_rt
  )
  return boolean
  is
    unequal_records exception;
    retval boolean;
  begin
  retval :=
     rec1.employee_id = rec2.employee_id
  or (    rec1.employee_id is null
      and rec2.employee_id is null);
  if not nvl(retval,
     false
     ) then
  raise unequal_records;
  end if;
  return true;
  exception
  when unequal_records then
  return false;
  end;

  --// Is the primary key NOT NULL? //--

  function isnullpky(
  rec_in in employee%rowtype
  )
  return boolean
  is
  begin
  return rec_in.employee_id is null;
  end;

  function isnullpky(
  rec_in in pky_rt
  )
  return boolean
  is
  begin
  return rec_in.employee_id is null;
  end;

  --// Query Processing --//

  function onerow_internal(
  employee_id_in in employee.employee_id%type
  )
  return employee%rowtype
  is
    cursor onerow_cur
    is
    select   employee_id, last_name, first_name, middle_initial, job_id,
             manager_id, hire_date, salary, commission, department_id, empno,
             ename, created_by, created_on, changed_by, changed_on
    from     employee
    where    employee_id = employee_id_in;
    onerow_rec employee%rowtype;
  begin
  open onerow_cur;
  fetch onerow_cur into onerow_rec;
  close onerow_cur;
  return onerow_rec;
  end onerow_internal;

  function onerow(
  employee_id_in in employee.employee_id%type
  )
  return employee%rowtype
  is
    retval employee%rowtype;
  begin
  retval := onerow_internal(employee_id_in
            );
  return retval;
  end onerow;

  function i_employee_name$pky(
  last_name_in in employee.last_name%type,
  first_name_in in employee.first_name%type,
  middle_initial_in in employee.middle_initial%type
  )
  return pky_rt
  is
    cursor getpky_cur
    is
    select   employee_id
    from     employee
    where    last_name = i_employee_name$pky.last_name_in
    and      first_name = i_employee_name$pky.first_name_in
    and      middle_initial = i_employee_name$pky.middle_initial_in;

    getpky_rec getpky_cur%rowtype;
    retval pky_rt;
  begin
  open getpky_cur;
  fetch getpky_cur into getpky_rec;
  if getpky_cur%found then
  retval.employee_id := getpky_rec.employee_id;
  end if;
  close getpky_cur;
  return retval;
  end i_employee_name$pky;

  function i_employee_name$row(
  last_name_in in employee.last_name%type,
  first_name_in in employee.first_name%type,
  middle_initial_in in employee.middle_initial%type
  )
  return employee%rowtype
  is
    cursor onerow_cur
    is
    select   employee_id, last_name, first_name, middle_initial, job_id,
             manager_id, hire_date, salary, commission, department_id, empno,
             ename, created_by, created_on, changed_by, changed_on
    from     employee
    where    last_name = i_employee_name$row.last_name_in
    and      first_name = i_employee_name$row.first_name_in
    and      middle_initial = i_employee_name$row.middle_initial_in;
    onerow_rec employee%rowtype;
  begin
  open onerow_cur;
  fetch onerow_cur into onerow_rec;
  close onerow_cur;
  return onerow_rec;
  end i_employee_name$row;

  function i_employee_name$val(
  employee_id_in in employee.employee_id%type
  )
  return i_employee_name_rt
  is
    v_onerow employee%rowtype;
    retval i_employee_name_rt;
  begin
  v_onerow := onerow(employee_id_in
              );

  retval.last_name := v_onerow.last_name;
  retval.first_name := v_onerow.first_name;
  retval.middle_initial := v_onerow.middle_initial;

  return retval;
  end i_employee_name$val;


  --// Count of all rows in table and for each foreign key. //--
  function rowcount
  return integer
  is
    retval integer;
  begin
  select   count(*)
  into    retval
  from     employee;
  return retval;
  end;

  function pkyrowcount(
  employee_id_in in employee.employee_id%type
  )
  return integer
  is
    retval integer;
  begin
  select   count(*)
  into    retval
  from     employee
  where    employee_id = employee_id_in;
  return retval;
  end;

  function emp_dept_lookuprowcount(
  department_id_in in employee.department_id%type
  )
  return integer
  is
    retval integer;
  begin
  select   count(*)
  into    retval
  from     employee
  where    department_id = emp_dept_lookuprowcount.department_id_in;
  return retval;
  end;
  function emp_job_lookuprowcount(
  job_id_in in employee.job_id%type
  )
  return integer
  is
    retval integer;
  begin
  select   count(*)
  into    retval
  from     employee
  where    job_id = emp_job_lookuprowcount.job_id_in;
  return retval;
  end;
  function emp_mgr_lookuprowcount(
  manager_id_in in employee.manager_id%type
  )
  return integer
  is
    retval integer;
  begin
  select   count(*)
  into    retval
  from     employee
  where    manager_id = emp_mgr_lookuprowcount.manager_id_in;
  return retval;
  end;

  --// Check Constraint Validation --//

  --// Check Constraint: DEPARTMENT_ID > 0 AND (salary > 0 OR salary IS NULL) --//
  function employee$complex$chk(
  department_id_in in employee.department_id%type,
  salary_in in employee.salary%type
  )
  return boolean
  is
  begin
  return (    department_id_in > 0
          and (   salary_in > 0
               or salary_in is null));
  end employee$complex$chk;

  --// Check Constraint: DEPARTMENT_ID IS NOT NULL --//
  function notnull_department_id$chk(
  department_id_in in employee.department_id%type
  )
  return boolean
  is
  begin
  return (department_id_in is not null);
  end notnull_department_id$chk;

  --// Check Constraint: EMPLOYEE_ID IS NOT NULL --//
  function notnull_employee_id$chk(
  employee_id_in in employee.employee_id%type
  )
  return boolean
  is
  begin
  return (employee_id_in is not null);
  end notnull_employee_id$chk;

  --// Check Constraint: HIRE_DATE IS NOT NULL --//
  function notnull_hire_date$chk(
  hire_dain in employee.hire_date%type
  )
  return boolean
  is
  begin
  return (hire_dain is not null);
  end notnull_hire_date$chk;

  --// Check Constraint: CREATED_BY IS NOT NULL --//
  function notnull_created_by$chk(
  created_by_in in employee.created_by%type
  )
  return boolean
  is
  begin
  return (created_by_in is not null);
  end notnull_created_by$chk;

  --// Check Constraint: CREATED_ON IS NOT NULL --//
  function notnull_created_on$chk(
  created_on_in in employee.created_on%type
  )
  return boolean
  is
  begin
  return (created_on_in is not null);
  end notnull_created_on$chk;

  --// Check Constraint: CHANGED_BY IS NOT NULL --//
  function notnull_changed_by$chk(
  changed_by_in in employee.changed_by%type
  )
  return boolean
  is
  begin
  return (changed_by_in is not null);
  end notnull_changed_by$chk;

  --// Check Constraint: CHANGED_ON IS NOT NULL --//
  function notnull_changed_on$chk(
  changed_on_in in employee.changed_on%type
  )
  return boolean
  is
  begin
  return (changed_on_in is not null);
  end notnull_changed_on$chk;

  procedure validate(
  employee_id_in in employee.employee_id%type,
  hire_dain in employee.hire_date%type,
  salary_in in employee.salary%type,
  department_id_in in employee.department_id%type,
  created_by_in in employee.created_by%type,
  created_on_in in employee.created_on%type,
  changed_by_in in employee.changed_by%type,
  changed_on_in in employee.changed_on%type,
  record_error in boolean := true
  )
  is
  begin
  if not employee$complex$chk(department_id_in,
     salary_in
     ) then
  --//** General mechanism! //--
  raise_application_error(-20000,
  'ora-2290: check constraint (employee$complex) failed!'
  );
  end if;
  if not notnull_department_id$chk(department_id_in
     ) then
  raise_application_error(-20000,
  'value of department_id cannot be null.'
  );
  end if;
  if not notnull_employee_id$chk(employee_id_in
     ) then
  raise_application_error(-20000,
  'value of employee_id cannot be null.'
  );
  end if;
  if not notnull_hire_date$chk(hire_dain
     ) then
  raise_application_error(-20000,
  'value of hire_date cannot be null.'
  );
  end if;
  if not notnull_created_by$chk(created_by_in
     ) then
  raise_application_error(-20000,
  'value of created_by cannot be null.'
  );
  end if;
  if not notnull_created_on$chk(created_on_in
     ) then
  raise_application_error(-20000,
  'value of created_on cannot be null.'
  );
  end if;
  if not notnull_changed_by$chk(changed_by_in
     ) then
  raise_application_error(-20000,
  'value of changed_by cannot be null.'
  );
  end if;
  if not notnull_changed_on$chk(changed_on_in
     ) then
  raise_application_error(-20000,
  'value of changed_on cannot be null.'
  );
  end if;
  exception
  when others then
  if record_error then
  raise;
  end if;
  raise;
  end validate;

  procedure validate(
  rec_in in employee%rowtype,
  record_error in boolean := true
  )
  is
  begin
  validate(rec_in.employee_id,
  rec_in.hire_date,
  rec_in.salary,
  rec_in.department_id,
  rec_in.created_by,
  rec_in.created_on,
  rec_in.changed_by,
  rec_in.changed_on,
  record_error
  );
  end validate;
  --// Update Processing --//

  procedure reset$frc
  is
  begin
  frcflg := emptyfrc;
  end reset$frc;

  function last_name$frc(
  last_name_in in employee.last_name%type default null
  )
  return employee.last_name%type
  is
  begin
  frcflg.last_name := c_set;
  return last_name_in;
  end last_name$frc;

  function first_name$frc(
  first_name_in in employee.first_name%type default null
  )
  return employee.first_name%type
  is
  begin
  frcflg.first_name := c_set;
  return first_name_in;
  end first_name$frc;

  function middle_initial$frc(
  middle_initial_in in employee.middle_initial%type default null
  )
  return employee.middle_initial%type
  is
  begin
  frcflg.middle_initial := c_set;
  return middle_initial_in;
  end middle_initial$frc;

  function job_id$frc(
  job_id_in in employee.job_id%type default null
  )
  return employee.job_id%type
  is
  begin
  frcflg.job_id := c_set;
  return job_id_in;
  end job_id$frc;

  function manager_id$frc(
  manager_id_in in employee.manager_id%type default null
  )
  return employee.manager_id%type
  is
  begin
  frcflg.manager_id := c_set;
  return manager_id_in;
  end manager_id$frc;

  function hire_date$frc(
  hire_dain in employee.hire_date%type default null
  )
  return employee.hire_date%type
  is
  begin
  frcflg.hire_date := c_set;
  return hire_dain;
  end hire_date$frc;

  function salary$frc(
  salary_in in employee.salary%type default null
  )
  return employee.salary%type
  is
  begin
  frcflg.salary := c_set;
  return salary_in;
  end salary$frc;

  function commission$frc(
  commission_in in employee.commission%type default null
  )
  return employee.commission%type
  is
  begin
  frcflg.commission := c_set;
  return commission_in;
  end commission$frc;

  function department_id$frc(
  department_id_in in employee.department_id%type default null
  )
  return employee.department_id%type
  is
  begin
  frcflg.department_id := c_set;
  return department_id_in;
  end department_id$frc;

  function empno$frc(
  empno_in in employee.empno%type default null
  )
  return employee.empno%type
  is
  begin
  frcflg.empno := c_set;
  return empno_in;
  end empno$frc;

  function ename$frc(
  ename_in in employee.ename%type default null
  )
  return employee.ename%type
  is
  begin
  frcflg.ename := c_set;
  return ename_in;
  end ename$frc;

  function created_by$frc(
  created_by_in in employee.created_by%type default null
  )
  return employee.created_by%type
  is
  begin
  frcflg.created_by := c_set;
  return created_by_in;
  end created_by$frc;

  function created_on$frc(
  created_on_in in employee.created_on%type default null
  )
  return employee.created_on%type
  is
  begin
  frcflg.created_on := c_set;
  return created_on_in;
  end created_on$frc;

  function changed_by$frc(
  changed_by_in in employee.changed_by%type default null
  )
  return employee.changed_by%type
  is
  begin
  frcflg.changed_by := c_set;
  return changed_by_in;
  end changed_by$frc;

  function changed_on$frc(
  changed_on_in in employee.changed_on%type default null
  )
  return employee.changed_on%type
  is
  begin
  frcflg.changed_on := c_set;
  return changed_on_in;
  end changed_on$frc;

  procedure upd(
  employee_id_in in employee.employee_id%type,
  last_name_in in employee.last_name%type default null,
  first_name_in in employee.first_name%type default null,
  middle_initial_in in employee.middle_initial%type default null,
  job_id_in in employee.job_id%type default null,
  manager_id_in in employee.manager_id%type default null,
  hire_dain in employee.hire_date%type default null,
  salary_in in employee.salary%type default null,
  commission_in in employee.commission%type default null,
  department_id_in in employee.department_id%type default null,
  empno_in in employee.empno%type default null,
  ename_in in employee.ename%type default null,
  created_by_in in employee.created_by%type default null,
  created_on_in in employee.created_on%type default null,
  changed_by_in in employee.changed_by%type default null,
  changed_on_in in employee.changed_on%type default null,
  rowcount_out out integer,
  reset_in in boolean default true
  )
  is
  begin
  update employee
     set last_name =
         decode(frcflg.last_name,
         c_set, last_name_in,
         nvl(last_name_in,
         last_name
         )
         ),
         first_name =
         decode(frcflg.first_name,
         c_set, first_name_in,
         nvl(first_name_in,
         first_name
         )
         ),
         middle_initial =
         decode(frcflg.middle_initial,
         c_set, middle_initial_in,
         nvl(middle_initial_in,
         middle_initial
         )
         ),
         job_id =
         decode(frcflg.job_id,
         c_set, job_id_in,
         nvl(job_id_in,
         job_id
         )
         ),
         manager_id =
         decode(frcflg.manager_id,
         c_set, manager_id_in,
         nvl(manager_id_in,
         manager_id
         )
         ),
         hire_date =
         decode(frcflg.hire_date,
         c_set, hire_dain,
         nvl(hire_dain,
         hire_date
         )
         ),
         salary =
         decode(frcflg.salary,
         c_set, salary_in,
         nvl(salary_in,
         salary
         )
         ),
         commission =
         decode(frcflg.commission,
         c_set, commission_in,
         nvl(commission_in,
         commission
         )
         ),
         department_id =
         decode(frcflg.department_id,
         c_set, department_id_in,
         nvl(department_id_in,
         department_id
         )
         ),
         empno =
         decode(frcflg.empno,
         c_set, empno_in,
         nvl(empno_in,
         empno
         )
         ),
         ename =
         decode(frcflg.ename,
         c_set, ename_in,
         nvl(ename_in,
         ename
         )
         ),
         created_by =
         decode(frcflg.created_by,
         c_set, created_by_in,
         nvl(created_by_in,
         created_by
         )
         ),
         created_on =
         decode(frcflg.created_on,
         c_set, created_on_in,
         nvl(created_on_in,
         created_on
         )
         ),
         changed_by =
         decode(frcflg.changed_by,
         c_set, changed_by_in,
         nvl(changed_by_in,
         changed_by
         )
         ),
         changed_on =
         decode(frcflg.changed_on,
         c_set, changed_on_in,
         nvl(changed_on_in,
         changed_on
         )
         )
   where employee_id = employee_id_in;
  rowcount_out := sql%rowcount;
  if reset_in then
  reset$frc;
  end if;
  exception
  when others then
  raise;
  end upd;

  --// Record-based Update --//
  procedure upd(
  rec_in in employee%rowtype,
  rowcount_out out integer,
  reset_in in boolean default true
  )
  is
  begin
  upd(rec_in.employee_id,
  rec_in.last_name,
  rec_in.first_name,
  rec_in.middle_initial,
  rec_in.job_id,
  rec_in.manager_id,
  rec_in.hire_date,
  rec_in.salary,
  rec_in.commission,
  rec_in.department_id,
  rec_in.empno,
  rec_in.ename,
  rec_in.created_by,
  rec_in.created_on,
  rec_in.changed_by,
  rec_in.changed_on,
  rowcount_out,
  reset_in
  );
  end upd;

  --// Insert Processing --//

  --// Initialize record with default values. --//
  function initrec(
  allnull in boolean := false
  )
  return employee%rowtype
  is
    retval employee%rowtype;
  begin
  if allnull then
  null;                                /* Default values are NULL already. */
  else
  retval.employee_id := null;
  retval.last_name := null;
  retval.first_name := null;
  retval.middle_initial := null;
  retval.job_id := null;
  retval.manager_id := null;
  retval.hire_date := sysdate;
  retval.salary := null;
  retval.commission := null;
  retval.department_id := null;
  retval.empno := null;
  retval.ename := null;
  retval.created_by := user;
  retval.created_on := sysdate;
  retval.changed_by := user;
  retval.changed_on := sysdate;
  end if;
  return retval;
  end;

  --// Initialize record with default values. --//
  procedure initrec(
  rec_inout in out employee%rowtype,
  allnull in boolean := false
  )
  is
  begin
  rec_inout := initrec;
  end;

  procedure ins$ins(
  employee_id_in in employee.employee_id%type,
  last_name_in in employee.last_name%type default null,
  first_name_in in employee.first_name%type default null,
  middle_initial_in in employee.middle_initial%type default null,
  job_id_in in employee.job_id%type default null,
  manager_id_in in employee.manager_id%type default null,
  hire_dain in employee.hire_date%type default sysdate,
  salary_in in employee.salary%type default null,
  commission_in in employee.commission%type default null,
  department_id_in in employee.department_id%type default null,
  empno_in in employee.empno%type default null,
  ename_in in employee.ename%type default null,
  created_by_in in employee.created_by%type default user,
  created_on_in in employee.created_on%type default sysdate,
  changed_by_in in employee.changed_by%type default user,
  changed_on_in in employee.changed_on%type default sysdate,
  upd_on_dup in boolean := false
  )
  is
  begin
  validate(employee_id_in,
  hire_dain,
  salary_in,
  department_id_in,
  created_by_in,
  created_on_in,
  changed_by_in,
  changed_on_in,
  true
  );
  insert into employee(employee_id, last_name, first_name, middle_initial,
                       job_id, manager_id, hire_date, salary, commission,
                       department_id, empno, ename, created_by, created_on,
                       changed_by, changed_on)
       values(employee_id_in, last_name_in, first_name_in, middle_initial_in,
              job_id_in, manager_id_in, hire_dain, salary_in, commission_in,
              department_id_in, empno_in, ename_in, created_by_in,
              created_on_in, changed_by_in, changed_on_in);
  exception
  when dup_val_on_index then
  if not nvl(upd_on_dup,
     false
     ) then
  raise;
  else
  declare
         v_errm varchar2(2000) := sqlerrm;
         v_rowcount integer;
         dotloc integer;
         leftloc integer;
         c_owner all_constraints.owner%type;
         c_name all_constraints.constraint_name%type;
  begin
  dotloc := instr(v_errm,
            '.'
            );
  leftloc := instr(v_errm,
             '('
             );
  c_owner := substr(v_errm,
             leftloc + 1,
             dotloc - leftloc - 1
             );
  c_name := substr(v_errm,
            dotloc + 1,
            instr(v_errm,
            ')'
            ) - dotloc - 1
            );

  --// Duplicate based on primary key //--
  if     'EMP_PK' = c_name
     and 'SCOTT' = c_owner then
  upd(employee_id_in,
  last_name_in,
  first_name_in,
  middle_initial_in,
  job_id_in,
  manager_id_in,
  hire_dain,
  salary_in,
  commission_in,
  department_id_in,
  empno_in,
  ename_in,
  created_by_in,
  created_on_in,
  changed_by_in,
  changed_on_in,
  v_rowcount,
  false
  );
  else
  --// Unique index violation. Cannot recover... //--
  raise;
  end if;
  end;
  end if;
  when others then
  raise;
  end ins$ins;


  --// Insert 3: with fields and providing primary key. --//
  procedure ins(
  employee_id_in in employee.employee_id%type,
  last_name_in in employee.last_name%type default null,
  first_name_in in employee.first_name%type default null,
  middle_initial_in in employee.middle_initial%type default null,
  job_id_in in employee.job_id%type default null,
  manager_id_in in employee.manager_id%type default null,
  hire_dain in employee.hire_date%type default sysdate,
  salary_in in employee.salary%type default null,
  commission_in in employee.commission%type default null,
  department_id_in in employee.department_id%type default null,
  empno_in in employee.empno%type default null,
  ename_in in employee.ename%type default null,
  created_by_in in employee.created_by%type default user,
  created_on_in in employee.created_on%type default sysdate,
  changed_by_in in employee.changed_by%type default user,
  changed_on_in in employee.changed_on%type default sysdate,
  upd_on_dup in boolean := false
  )
  is
  begin
  ins$ins(employee_id_in,
  last_name_in,
  first_name_in,
  middle_initial_in,
  job_id_in,
  manager_id_in,
  hire_dain,
  salary_in,
  commission_in,
  department_id_in,
  empno_in,
  ename_in,
  created_by_in,
  created_on_in,
  changed_by_in,
  changed_on_in,
  upd_on_dup
  );
  end;

  --// Insert 4: with a record and providing primary key. --//
  procedure ins(
  rec_in in employee%rowtype,
  upd_on_dup in boolean := false
  )
  is
  begin
  ins$ins(rec_in.employee_id,
  rec_in.last_name,
  rec_in.first_name,
  rec_in.middle_initial,
  rec_in.job_id,
  rec_in.manager_id,
  rec_in.hire_date,
  rec_in.salary,
  rec_in.commission,
  rec_in.department_id,
  rec_in.empno,
  rec_in.ename,
  rec_in.created_by,
  rec_in.created_on,
  rec_in.changed_by,
  rec_in.changed_on,
  upd_on_dup
  );
  end;

  --// Delete Processing --//

  procedure del(
  employee_id_in in employee.employee_id%type,
  rowcount_out out integer
  )
  is
  begin
  delete
    from employee
   where employee_id = employee_id_in;
  rowcount_out := sql%rowcount;
  exception
  when others then
  raise;
  end del;

  --// Record-based delete --//
  procedure del(
  rec_in in pky_rt,
  rowcount_out out integer
  )
  is
  begin
  del(rec_in.employee_id,
  rowcount_out
  );
  end del;

  procedure del(
  rec_in in employee%rowtype,
  rowcount_out out integer
  )
  is
  begin
  del(rec_in.employee_id,
  rowcount_out
  );
  end del;

  --// Delete all records for foreign key EMP_DEPT_LOOKUP. //--
  procedure delby_emp_dept_lookup(
  department_id_in in employee.department_id%type,
  rowcount_out out integer
  )
  is
  begin
  delete
    from employee
   where department_id = delby_emp_dept_lookup.department_id_in;
  rowcount_out := sql%rowcount;
  exception
  when others then
  raise;
  end delby_emp_dept_lookup;

  --// Delete all records for foreign key EMP_JOB_LOOKUP. //--
  procedure delby_emp_job_lookup(
  job_id_in in employee.job_id%type,
  rowcount_out out integer
  )
  is
  begin
  delete
    from employee
   where job_id = delby_emp_job_lookup.job_id_in;
  rowcount_out := sql%rowcount;
  exception
  when others then
  raise;
  end delby_emp_job_lookup;

  --// Delete all records for foreign key EMP_MGR_LOOKUP. //--
  procedure delby_emp_mgr_lookup(
  manager_id_in in employee.manager_id%type,
  rowcount_out out integer
  )
  is
  begin
  delete
    from employee
   where manager_id = delby_emp_mgr_lookup.manager_id_in;
  rowcount_out := sql%rowcount;
  exception
  when others then
  raise;
  end delby_emp_mgr_lookup;


  --// Program called by database initialization script to pin the package. //--
  procedure pinme
  is
  begin
  --// Doesn't do anything except cause the package to be loaded. //--
  null;
  end;





--// Initialization section for the package. --//
begin
null;                                                         -- Placeholder.
end employee;
/
