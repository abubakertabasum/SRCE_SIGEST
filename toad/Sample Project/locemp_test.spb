
create or replace package body locemp_tst
is
  g_norow locemp%rowtype;
  g_norow_set boolean := false;

  -- Display header for a new set of information.
  procedure newset(
  str in varchar2,
  gr in varchar2 := '='
  )
  is
  begin
  dbms_output.put_line(rpad(gr,
                       60,
                       gr
                       )
  );
  dbms_output.put_line(str
  );
  dbms_output.put_line(rpad(gr,
                       60,
                       gr
                       )
  );
  end;

  -- Show the contents of a table record.
  procedure showrow(
  row_in in locemp%rowtype
  )
  is
  begin
  dbms_output.put_line('**COL employee_id: ' || row_in.employee_id
  );
  dbms_output.put_line('**COL loc_id: ' || row_in.loc_id
  );
  dbms_output.put_line('**COL created_by: ' || row_in.created_by
  );
  dbms_output.put_line('**COL created_on: ' || row_in.created_on
  );
  dbms_output.put_line('**COL changed_by: ' || row_in.changed_by
  );
  dbms_output.put_line('**COL changed_on: ' || row_in.changed_on
  );
  end;

  -- Sets contents of record that does NOT match a row in the database table.
  procedure set_norow(
  employee_id_in in locemp.employee_id%type,
  loc_id_in in locemp.loc_id%type,
  created_by_in in locemp.created_by%type default user,
  created_on_in in locemp.created_on%type default sysdate,
  changed_by_in in locemp.changed_by%type default user,
  changed_on_in in locemp.changed_on%type default sysdate
  )
  is
  begin
  newset('Defining "No Row" Values for Primary and Foreign Keys'
  );
  g_norow.employee_id := employee_id_in;
  g_norow.loc_id := loc_id_in;
  g_norow.created_by := created_by_in;
  g_norow.created_on := created_on_in;
  g_norow.changed_by := changed_by_in;
  g_norow.changed_on := changed_on_in;
  g_norow_set := true;
  end;

  function norowset
  return boolean
  is
  begin
  return g_norow_set;
  end;

  -- Test unique index related functionality.
  procedure uind(
  maxrows in integer := null
  )
  is
    v_row locemp%rowtype;

    --// Test record structures and functions to retrieve rows. --//
    v_pky locemp.pky_rt;
  begin
  newset('Unique Index-Related Fetch Activity',
  '*'
  );

  -- Exercise "by primary key" cursor
  for rec in locemp.allbypky_cur loop
  exit when locemp.allbypky_cur%rowcount > nvl(maxrows,
                                           5
                                           );

  -- Perform a lookup based on the primary key values.
  end loop;
  end uind;

  procedure pky(
  maxrows in integer := null
  )
  is
    v_row locemp.allforpky_cur%rowtype;

    v_pky locemp.pky_rt;

  begin
  newset('Primary Key-Related Activity',
  '*'
  );

  -- Use the by primary key cursor.
  for rec in locemp.allbypky_cur loop
  exit when locemp.allbypky_cur%rowcount > nvl(maxrows,
                                           5
                                           );

  newset('Cursor by primary key'
  );

  -- Open the cursor for the current primary key and fetch the row
  -- it identifies.

  open locemp.allforpky_cur(rec.employee_id,
  rec.loc_id
  );

  fetch locemp.allforpky_cur into v_row;

  dbms_output.put_line('**PKY employee_id: ' || v_row.employee_id
  );
  dbms_output.put_line('**PKY loc_id: ' || v_row.loc_id
  );

  if locemp.allforpky_cur%notfound then
  dbms_output.put_line('!! Row not found for primary key.'
  );
  else
  dbms_output.put_line('Row found for primary key'
  );
  dbms_output.put_line('**COL created_by: ' || v_row.created_by
  );
  dbms_output.put_line('**COL created_on: ' || v_row.created_on
  );
  dbms_output.put_line('**COL changed_by: ' || v_row.changed_by
  );
  dbms_output.put_line('**COL changed_on: ' || v_row.changed_on
  );
  end if;

  -- Close the cursor.
  locemp.close_allforpky_cur;

  end loop;
  end pky;

  -- Test FKY related functionality.
  procedure fky(
  maxrows in integer := null
  )
  is
    v_pky locemp.pky_rt;
    -- Declare a cursor to obtain distinct foreign key values in the table.
    cursor le_emp_lookup_all_cur
    is
    select distinct   employee_id
    from     locemp;
    -- Declare a cursor to obtain distinct foreign key values in the table.
    cursor le_loc_lookup_all_cur
    is
    select distinct   loc_id
    from     locemp;
  begin
  newset('Foreign Key-Related Activity',
  '*'
  );

  -- For each value in this foreign key cursor...
  for orec in le_emp_lookup_all_cur loop
  exit when le_emp_lookup_all_cur%rowcount > nvl(maxrows,
                                             5
                                             );
  newset('Retrieve Data for Foreign Key le_emp_lookup'
  );
  dbms_output.put_line('**FKY employee_id: ' || orec.employee_id
  );
  -- Display all records identified for that foreign key.
  for irec in locemp.le_emp_lookup_all_cur(orec.employee_id
              ) loop
  if locemp.le_emp_lookup_all_cur%rowcount > nvl(maxrows,
                                             5
                                             ) then
  --// Test close cursor program and then exit. --//
  locemp.close_le_emp_lookup_all_cur;
  exit;
  else
  showrow(irec
  );
  end if;
  end loop;
  end loop;
  -- For each value in this foreign key cursor...
  for orec in le_loc_lookup_all_cur loop
  exit when le_loc_lookup_all_cur%rowcount > nvl(maxrows,
                                             5
                                             );
  newset('Retrieve Data for Foreign Key le_loc_lookup'
  );
  dbms_output.put_line('**FKY loc_id: ' || orec.loc_id
  );
  -- Display all records identified for that foreign key.
  for irec in locemp.le_loc_lookup_all_cur(orec.loc_id
              ) loop
  if locemp.le_loc_lookup_all_cur%rowcount > nvl(maxrows,
                                             5
                                             ) then
  --// Test close cursor program and then exit. --//
  locemp.close_le_loc_lookup_all_cur;
  exit;
  else
  showrow(irec
  );
  end if;
  end loop;
  end loop;
  end fky;

  -- Test lookup functionality
  procedure lookups(
  maxrows in integer := null
  )
  is
    v_row locemp%rowtype;

  begin
  newset('Retrieve one row at a time.',
  '*'
  );

  for rec in locemp.allbypky_cur loop
  exit when locemp.allbypky_cur%rowcount > nvl(maxrows,
                                           5
                                           );

  newset('Retrieve and display row and desc columns for primary key.'
  );

  dbms_output.put_line('**PKY employee_id: ' || rec.employee_id
  );
  dbms_output.put_line('**PKY loc_id: ' || rec.loc_id
  );

  -- Use onerow function to lookup row for this primary key value.
  v_row := locemp.onerow(rec.employee_id,
           rec.loc_id
           );

  if not locemp.isnullpky(v_row
     ) then
  showrow(v_row
  );
  else
  dbms_output.put_line('!! Row not found for primary key.'
  );
  end if;
  end loop;


  end lookups;

  -- Test the validation programs.
  procedure validate
  is
    v_row locemp%rowtype;
    v_valuesok boolean;
    v_errnum integer;
    v_errmsg varchar2(2000);
  begin
  --// Check Constraint Validation --//

  --// Check Constraint: CREATED_BY IS NOT NULL --//
  if not locemp.notnull_created_by$chk(created_by_in => null
     ) then
  dbms_output.put_line('Constraint NOTNULL_CREATED_BY failed.'
  );
  end if;

  --// Check Constraint: CREATED_ON IS NOT NULL --//
  if not locemp.notnull_created_on$chk(created_on_in => null
     ) then
  dbms_output.put_line('Constraint NOTNULL_CREATED_ON failed.'
  );
  end if;

  --// Check Constraint: CHANGED_BY IS NOT NULL --//
  if not locemp.notnull_changed_by$chk(changed_by_in => null
     ) then
  dbms_output.put_line('Constraint NOTNULL_CHANGED_BY failed.'
  );
  end if;

  --// Check Constraint: CHANGED_ON IS NOT NULL --//
  if not locemp.notnull_changed_on$chk(changed_on_in => null
     ) then
  dbms_output.put_line('Constraint NOTNULL_CHANGED_ON failed.'
  );
  end if;

  locemp.validate(created_by_in => null,
  created_on_in => null,
  changed_by_in => null,
  changed_on_in => null,
  record_error => false                                    --// no record //--
  );

  locemp.validate(v_row,
  false
  );
  end validate;

  -- Test insert activity.
  procedure ins(
  maxrows in integer := null
  )
  is
    v_row locemp%rowtype;
    v_pky locemp.pky_rt;
    v_pkycol integer;
    v_nxtpky integer;

    --// Variable for every primary key column //--
    v_employee_id locemp.employee_id%type;
    v_loc_id locemp.loc_id%type;

    v_errnum integer;
    v_errmsg varchar2(2000);
  begin
  newset('INS: function-based record init'
  );
  v_row := locemp.initrec;
  showrow(v_row
  );

  newset('INS: procedure-based record init'
  );
  locemp.initrec(v_row
  );
  showrow(v_row
  );

  rollback;

  newset('INS: Pass in primary key'
  );

  locemp.ins(v_employee_id,
  v_loc_id,
  substr('created_by',
  1,
  100
  ),
  sysdate,
  substr('changed_by',
  1,
  100
  ),
  sysdate,
  false
  );

  rollback;

  newset('INS: Record-based insert'
  );

  --// Populate the row! //--
  locemp.ins(v_row,
  false
  );

  rollback;
  for rec in locemp.allbypky_cur loop
  exit when locemp.allbypky_cur%rowcount > 1;

  --// Move primary key information to the PKY record. //--
  v_pky.employee_id := rec.employee_id;
  v_pky.loc_id := rec.loc_id;

  --// Try to reinsert same record with update-on-dup option. //--
  --// Double all nonprimary key column values. //--
  v_row.created_by := substr(v_row.created_by || v_row.created_by,
                      1,
                      100
                      );
  v_row.created_on :=
          v_row.created_on + (
                             v_row.created_on - trunc(v_row.created_on,
                                                'YY'
                                                )
                             );
  v_row.changed_by := substr(v_row.changed_by || v_row.changed_by,
                      1,
                      100
                      );
  v_row.changed_on :=
          v_row.changed_on + (
                             v_row.changed_on - trunc(v_row.changed_on,
                                                'YY'
                                                )
                             );

  locemp.ins(v_row,
  true
  );

  rollback;

  --// Try to reinsert same record with no-update option. //--
  locemp.ins(v_row,
  false
  );

  rollback;
  end loop;
  end ins;
  procedure upd(
  maxrows in integer := null
  )
  is
    v_row locemp%rowtype;
    v_pky locemp.pky_rt;
    v_created_by locemp.created_by%type;
    v_created_on locemp.created_on%type;
    v_changed_by locemp.changed_by%type;
    v_changed_on locemp.changed_on%type;

    v_errnum integer;
    v_errmsg varchar2(2000);
    v_rowcount integer;
  begin
  newset('UPD: Update Processing',
  '*'
  );

  for rec in locemp.allbypky_cur loop
  exit when locemp.allbypky_cur%rowcount > nvl(maxrows,
                                           5
                                           );

  --// Move primary key information to the PKY record. //--
  v_pky.employee_id := rec.employee_id;
  v_pky.loc_id := rec.loc_id;

  newset('UPD: Turn off all force fields with reset, update all NULLs'
  );
  locemp.reset$frc;
  locemp.upd(rec.employee_id,
  rec.loc_id,
  null,
  null,
  null,
  null,
  v_rowcount,
  true
  );

  dbms_output.put_line('Rows updated: ' || v_rowcount
  );
  rollback;

  newset('UPD: Turn on force fields, update all NULLs'
  );
  locemp.upd(rec.employee_id,
  rec.loc_id,
  'a',
  sysdate,
  'a',
  sysdate,
  v_rowcount,
  true
  );

  dbms_output.put_line('Rows updated: ' || v_rowcount
  );

  rollback;

  newset('UPD: Record-based Update'
  );

  locemp.upd(v_row,
  v_rowcount,
  true
  );

  dbms_output.put_line('Rows updated: ' || v_rowcount
  );
  end loop;
  end upd;


  procedure del(
  maxrows in integer := null
  )
  is
    v_pky locemp.pky_rt;
    v_created_by locemp.created_by%type;
    v_created_on locemp.created_on%type;
    v_changed_by locemp.changed_by%type;
    v_changed_on locemp.changed_on%type;
    v_rowcount integer;

    procedure showcount(
    str in varchar2 := null
    )
    is
    begin
    select   count(*)
    into    v_rowcount
    from     locemp;

    dbms_output.put_line('# of rows in table ' || str || ': ' || v_rowcount
    );
    end;
  begin
  newset('DEL: Delete Processing',
  '*'
  );

  showcount('before delete - individual fields'
  );
  for rec in locemp.allbypky_cur loop
  exit when locemp.allbypky_cur%rowcount > nvl(maxrows,
                                           5
                                           );
  locemp.del(rec.employee_id,
  rec.loc_id,
  v_rowcount
  );
  end loop;
  showcount('after delete'
  );

  rollback;

  showcount('before delete - by record'
  );
  for rec in locemp.allbypky_cur loop
  exit when locemp.allbypky_cur%rowcount > nvl(maxrows,
                                           5
                                           );
  v_pky.employee_id := rec.employee_id;
  v_pky.loc_id := rec.loc_id;
  locemp.del(v_pky,
  v_rowcount
  );
  end loop;
  showcount('after delete'
  );

  rollback;

  if norowset then
  showcount('Delete "No Row"'
  );
  locemp.del(g_norow.employee_id,
  g_norow.loc_id,
  v_rowcount
  );
  dbms_output.put_line('Number of "no rows" deleted:' || v_rowcount
  );
  end if;

  end;

  procedure load
  is
  begin
  dbms_output.put_line('LOAD: Pre-loading not performed for this table.'
  );
  end;

end locemp_tst;
/
